import "dotenv/config"
import { BotController } from "./robot/botController"
import { PositionManager } from "./robot/positionManager"
import { indicatorService } from "./services/indicatorsService"
import { orderService } from "./services/orderService"
import { fileService } from "./services/fileService"
import { updateTimeOffset } from "./services/timeOffsetService"
import { PositionService } from "./services/positionService"

// üîß VARI√ÅVEIS GLOBAIS
let TRADING_SYMBOLS: string[] = []
let bot: BotController | null = null
let mainInterval: NodeJS.Timeout | null = null
let statsInterval: NodeJS.Timeout | null = null

const positionService = new PositionService(
  'https://fapi.binance.com',
  process.env.BINANCE_API_KEY!,
  process.env.BINANCE_API_SECRET!
)

// Instancia o positionManager
const positionManager = new PositionManager()

// Adapter para o orderService ‚Äî m√©todos que o BotController espera
const orderServiceAdapter = {
  getKlines: orderService.getKlines,
  placeOrder: orderService.placeOrder,
  placeCloseOrder: orderService.placeCloseOrder,
  placeBracketOrder: orderService.placeBracketOrder,
  placeBracketOrderWithRetries: orderService.placeBracketOrderWithRetries,
  cancelOpenOrders: orderService.cancelOpenOrders,
  getAccountBalance: orderService.getAccountBalance,
  getAllOpenOrders: orderService.getAllOpenOrders,
  getRealizedPnl: orderService.getRealizedPnl,
}

// üîß FUN√á√ÉO PARA CARREGAR S√çMBOLOS
async function loadTradingSymbols(): Promise<string[]> {
  try {
    console.log("üìã Carregando s√≠mbolos de trading...")
    const symbols = await positionManager.getSymbols()

    if (!symbols || symbols.length === 0) {
      throw new Error("Nenhum s√≠mbolo encontrado no positionManager")
    }

    console.log(`   ‚úÖ ${symbols.length} s√≠mbolos carregados: ${symbols.slice(0, 5).join(", ")}${symbols.length > 5 ? "..." : ""}`)
    return symbols
  } catch (error: any) {
    console.error("‚ùå Erro ao carregar s√≠mbolos:", error?.message || error)
    throw error
  }
}

// üîß FUN√á√ÉO DE INICIALIZA√á√ÉO OTIMIZADA
async function initializeBot(): Promise<BotController> {
  console.log(`\nü§ñ Inicializando Bot com WebSockets otimizados...`)

  try {
    // 1. Carrega s√≠mbolos de trading
    TRADING_SYMBOLS = await loadTradingSymbols()

    // 2. Sincroniza o clock
    console.log("‚è∞ Sincronizando clock...")
    await updateTimeOffset()

    // 3. üöÄ INICIALIZA WEBSOCKETS OTIMIZADOS
    console.log(`üì° Inicializando WebSockets para ${TRADING_SYMBOLS.length} s√≠mbolos...`)
    await orderService.initializeWebSockets(TRADING_SYMBOLS)

    // Inicia PositionService WS
    console.log("üì° Iniciando WebSocket de posi√ß√µes (PositionService)...")
    await positionService.startPositionStream()

    // 4. Aguarda estabiliza√ß√£o dos WebSockets
    console.log("‚è≥ Aguardando estabiliza√ß√£o dos WebSockets...")
    await waitForWebSocketStabilization()

    // 5. Verifica se os dados est√£o chegando
    const positions = await orderService.getOpenPositions()
    const balance = await orderService.getAccountBalance()

    console.log(`‚úÖ WebSockets inicializados:`)
    console.log(`   üìà Posi√ß√µes: ${positions.length}`)
    console.log(`   üí∞ Saldo: $${balance.availableBalance?.toFixed(2) || "0.00"}`)

    // 6. Instancia o bot
    const botInstance = new BotController(
      { getOpenPositions: () => positionService.getOpenPositions() },
      indicatorService,
      orderServiceAdapter,
      positionManager,
      fileService
    )

    console.log("üéØ Bot inicializado com sucesso!")
    return botInstance
  } catch (error: any) {
    console.error("‚ùå Erro na inicializa√ß√£o:", error?.response?.data?.msg || error?.message || error)
    throw error
  }
}

// ‚è≥ FUN√á√ÉO PARA AGUARDAR ESTABILIZA√á√ÉO DOS WEBSOCKETS
async function waitForWebSocketStabilization(): Promise<void> {
  let attempts = 0
  const maxAttempts = 10
  const delayMs = 1000

  while (attempts < maxAttempts) {
    await new Promise((resolve) => setTimeout(resolve, delayMs))

    try {
      const balance = await orderService.getAccountBalance()

      // Verifica se pelo menos um pre√ßo est√° dispon√≠vel
      let priceAvailable = false
      for (const symbol of TRADING_SYMBOLS.slice(0, 3)) { // Testa apenas os 3 primeiros
        const price = orderService.getCurrentPrice(symbol)
        if (price > 0) {
          priceAvailable = true
          break
        }
      }

      if (balance.availableBalance > 0 && priceAvailable) {
        console.log(`   ‚úÖ WebSockets estabilizados ap√≥s ${attempts + 1} tentativas`)
        return
      }
    } catch (error) {
      // Continua tentando
    }

    attempts++
    console.log(`   ‚è≥ Aguardando estabiliza√ß√£o... (${attempts}/${maxAttempts})`)
  }

  console.warn("‚ö†Ô∏è WebSockets podem n√£o estar totalmente estabilizados, continuando...")
}

// üîÑ FUN√á√ÉO PRINCIPAL DO BOT
async function runBotCycle(): Promise<void> {
  if (!bot) {
    console.error("‚ùå Bot n√£o foi inicializado")
    return
  }

  try {
    // Atualiza offset de tempo
    await updateTimeOffset()

    // Executa o ciclo do bot
    await bot.run(TRADING_SYMBOLS)
  } catch (err: any) {
    console.error("‚ùå Erro no ciclo do bot:", err?.response?.data?.msg || err?.message || err)

    // Se for erro de WebSocket, tenta reconectar
    if (isWebSocketError(err)) {
      await handleWebSocketReconnection()
    }
  }
}

// üîç FUN√á√ÉO PARA DETECTAR ERROS DE WEBSOCKET
function isWebSocketError(error: any): boolean {
  const errorMsg = (error?.message || "").toLowerCase()
  const errorCode = error?.code

  return (
    errorMsg.includes("websocket") ||
    errorMsg.includes("connection") ||
    errorMsg.includes("econnreset") ||
    errorCode === "ECONNRESET" ||
    errorCode === "ENOTFOUND" ||
    errorCode === "ETIMEDOUT"
  )
}

// üîÑ FUN√á√ÉO PARA RECONEX√ÉO DE WEBSOCKET
async function handleWebSocketReconnection(): Promise<void> {
  console.warn("üîÑ Erro de conex√£o detectado, reinicializando WebSockets...")

  try {
    // Verifica se ainda temos os s√≠mbolos
    if (!TRADING_SYMBOLS || TRADING_SYMBOLS.length === 0) {
      console.log("üìã Recarregando s√≠mbolos...")
      TRADING_SYMBOLS = await loadTradingSymbols()
    }

    // Reinicializa WebSockets
    await orderService.initializeWebSockets(TRADING_SYMBOLS)

    // Aguarda estabiliza√ß√£o
    await waitForWebSocketStabilization()

    console.log("‚úÖ WebSockets reinicializados com sucesso")
  } catch (reconnectError: any) {
    console.error("‚ùå Falha ao reconectar WebSockets:", reconnectError?.message || reconnectError)
  }
}

// üìä FUN√á√ÉO PARA MOSTRAR ESTAT√çSTICAS
async function showBotStats(): Promise<void> {
  try {
    const positions = await orderService.getOpenPositions()
    const balance = await orderService.getAccountBalance()

    console.log("\nüìä Status do Bot:")
    console.log(`   üìà Posi√ß√µes abertas: ${positions.length}`)
    console.log(`   üí∞ Saldo dispon√≠vel: $${balance.availableBalance?.toFixed(2) || "0.00"}`)
    console.log(`   üìâ PnL n√£o realizado: $${balance.totalUnrealizedProfit?.toFixed(2) || "0.00"}`)

    // Mostra pre√ßos atuais dos principais s√≠mbolos
    const mainSymbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"].filter(symbol =>
      TRADING_SYMBOLS.includes(symbol)
    )

    if (mainSymbols.length > 0) {
      console.log("   üí± Pre√ßos atuais:")
      for (const symbol of mainSymbols) {
        const price = orderService.getCurrentPrice(symbol)
        if (price > 0) {
          const pair = symbol.replace("USDT", "")
          console.log(`      ${pair}: $${price.toFixed(2)}`)
        }
      }
    }

    // Mostra posi√ß√µes abertas se houver
    if (positions.length > 0) {
      console.log("   üìà Posi√ß√µes abertas:")
      for (const pos of positions.slice(0, 5)) { // Mostra apenas as 5 primeiras
        const pnlPercent = ((orderService.getCurrentPrice(pos.symbol) - pos.entryPrice) / pos.entryPrice * 100)
        const side = pos.side === "BUY" ? "üü¢" : "üî¥"
        console.log(`      ${side} ${pos.symbol}: ${pos.positionAmt.toFixed(4)} @ $${pos.entryPrice.toFixed(2)} (${pnlPercent > 0 ? "+" : ""}${pnlPercent.toFixed(2)}%)`)
      }
      if (positions.length > 5) {
        console.log(`      ... e mais ${positions.length - 5} posi√ß√µes`)
      }
    }
  } catch (error: any) {
    console.error("‚ùå Erro ao obter estat√≠sticas:", error?.message || error)
  }
}

// üßπ FUN√á√ÉO DE CLEANUP
async function cleanup(): Promise<void> {
  console.log("\nüõë Encerrando bot...")

  try {
    // Limpa intervals
    if (mainInterval) {
      clearInterval(mainInterval)
      mainInterval = null
    }
    if (statsInterval) {
      clearInterval(statsInterval)
      statsInterval = null
    }

    await positionService.stopPositionStream()
    console.log("‚úÖ WS de posi√ß√µes fechado")

    // Fecha todas as conex√µes WebSocket
    await orderService.cleanup()
    console.log("‚úÖ WebSockets fechados")

    // Opcional: Fechar todas as posi√ß√µes abertas
    const shouldClosePositions = process.env.CLOSE_POSITIONS_ON_EXIT === "true"
    if (shouldClosePositions) {
      console.log("üîí Fechando posi√ß√µes abertas...")
      await orderService.closeAllOpenPositions()
      console.log("‚úÖ Posi√ß√µes fechadas")
    }
  } catch (error: any) {
    console.error("‚ùå Erro no cleanup:", error?.message || error)
  }

  console.log("üëã Bot encerrado com sucesso")
  process.exit(0)
}

// üöÄ FUN√á√ÉO PRINCIPAL
// ; (async () => {
//   try {
//     // Inicializa o bot
//     bot = await initializeBot()

//     // Executa a primeira vez
//     console.log("\nüéØ Executando primeiro ciclo...")
//     await runBotCycle()

//     // Configura intervalo de execu√ß√£o (5 minutos)
//     console.log("\n‚è∞ Bot configurado para executar a cada 5 minutos")
//     mainInterval = setInterval(
//       async () => {
//         await runBotCycle()
//       },
//       5 * 60 * 1000,
//     )

//     // üìä ESTAT√çSTICAS PERI√ìDICAS (a cada 15 minutos)
//     statsInterval = setInterval(
//       async () => {
//         await showBotStats()
//       },
//       15 * 60 * 1000,
//     )

//     // Mostra estat√≠sticas iniciais
//     setTimeout(async () => {
//       await showBotStats()
//     }, 10000) // Ap√≥s 10 segundos

//     console.log("‚úÖ Bot est√° rodando! Use Ctrl+C para parar.")

//   } catch (error: any) {
//     console.error("‚ùå Falha cr√≠tica na inicializa√ß√£o:", error?.message || error)
//     process.exit(1)
//   }
// })()

// üîß HANDLERS DE ENCERRAMENTO
process.on("SIGINT", async () => {
  console.log("\nüì° Sinal SIGINT recebido (Ctrl+C)")
  await cleanup()
})

process.on("SIGTERM", async () => {
  console.log("\nüì° Sinal SIGTERM recebido")
  await cleanup()
})

// Tratamento de erros n√£o capturados
process.on("uncaughtException", async (error) => {
  console.error("‚ùå Erro n√£o capturado:", error)
  await cleanup()
})

process.on("unhandledRejection", async (reason, promise) => {
  console.error("‚ùå Promise rejeitada n√£o tratada:", reason)
  console.error("Promise:", promise)
  await cleanup()
})

// üìä HANDLER PARA MOSTRAR STATUS (opcional)
process.on("SIGUSR1", async () => {
  console.log("\nüìä Status solicitado via SIGUSR1:")
  await showBotStats()
})

export {
  initializeBot,
  showBotStats,
  cleanup
};

// S√≥ executa main se rodar diretamente "npm run start" ou "ts-node index.ts"
if (require.main === module) {
  (async () => {
    bot = await initializeBot();
    await runBotCycle();

    mainInterval = setInterval(async () => {
      await runBotCycle();
    }, 5 * 60 * 1000);

    statsInterval = setInterval(async () => {
      await showBotStats();
    }, 15 * 60 * 1000);

    console.log('‚úÖ Bot est√° rodando! Use Ctrl+C para parar.');
  })();
}